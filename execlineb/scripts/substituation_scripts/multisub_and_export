#!/usr/bin/execlineb -S0


foreground { s6-echo " [run] env before multisubstitute" } s6-env
# NOTE: multisubstitute program [ help output is only a subset of full options ]
#  multisubstitute performs several substitutions at once in its argv, then executes another program.
#  multisubstitute
#      {
#        [ define [ -n ] [ -s ] [ -C | -c ] [ -d delim ] variable value ]
#        [ importas [ -i | -D default ] [ -n ] [ -s ] [ -C | -c ] [ -d delim ] variable envvar ]
#        ...
#      }
#      prog...

# FIXME: note, with -i, this will fail when undefined. Lets try to set it automatically instead
# multisubstitute
# {
#   # NOTE: importas program
#   # importas [ -i | -D default ] [ -u ] [ -s ] [ -C | -c ] [ -n ] [ -d delim ] variable envvar prog...
#   # D default : If this option is given and envvar is undefined, substitute default for the value of variable instead of no word. For instance, to substitute the empty word, use -D "".
#   # -i : Insist. If envvar is undefined, importas will not do anything; instead, it will exit 100 with an error message. This has precedence over any -D option.
#   # -u : Unexport. envvar will be removed from the environment after the substitution. importas -u variable envvar is equivalent to importas variable envvar unexport envvar.
#   # Other options are used to control the substitution mechanism.
#   importas -i HOME HOME
#   importas -i LOGNAME LOGNAME
# }

# NOTE: export program
# export var value prog...

# export sets an environment variable to a given value, then executes a program.
# export sets the var environment variable to the string value, then execs into prog with its arguments.
# var must be given without a dollar !
# var must not contain the character = .

export PATH "/bin"

foreground {
    # NOTE: backtick program
    # backtick runs a program and stores its output in an environment variable, then executes another program.
    # backtick [ -i | -I | -D default ] [ -n ] variable { prog1... } prog2...
    # -n : chomp an ending newline off prog1...'s output.
    # -i : backtick exits 1.
    # -I : variable is removed from the environment, and execution proceeds.
    # -D default : the value of variable is set to default, and execution proceeds.
    # neither of those options: the value of variable is set to whatever the start of prog1...'s output is, up to the first null character, or to whatever prog1... wrote before crashing; then execution proceeds.

    # SET LOGNAME IF NOT DEFINED
    backtick -n LOGNAME
    {
        redirfd -w 2 /dev/null id -un
    }
    multisubstitute {
        importas LOGNAME LOGNAME
    }

    foreground { s6-echo " [multisub_and_export] LOGNAME:${LOGNAME}" }
}

# THINGS TO WORK INTO THIS SCRIPT
# outdir=${1:-${XDG_RUNTIME_DIR}/env}

# envvar() {
#   export "${1}=${2}"
#   printf '%s'  "$2" > "${outdir}/${1}"
# }

# # required variables (must be set first)
# LOGNAME=${LOGNAME:-${USER}}
# LOGNAME=${LOGNAME:-$(id -un)}
# PATH=${PATH:-/usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin}

# # POSIX variables
# # see http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap08.html#tag_08_03
# envvar HOME             "${HOME:-/home/${LOGNAME}}"
# envvar LOGNAME          "${LOGNAME}"
# envvar PATH             "${HOME}/.local/bin:${PATH}"
# envvar SHELL            "${SHELL:-$(getent passwd  "$LOGNAME" | cut -d: -f7)}"

# # XDG path variables
# # see https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
# envvar XDG_CACHE_HOME   "${XDG_CACHE_HOME:-${HOME}/.cache}"
# envvar XDG_CONFIG_HOME  "${XDG_CONFIG_HOME:-${HOME}/.config}"
# envvar XDG_DATA_HOME    "${XDG_DATA_HOME:-${HOME}/.local/share}"
# envvar XDG_RUNTIME_DIR  "${XDG_RUNTIME_DIR:-/run/user/${LOGNAME}}"

# # XDG system path variable
# # see https://standards.freedesktop.org/icon-theme-spec/icon-theme-spec-latest.html
# envvar XDG_DATA_DIRS    "${XDG_DATA_HOME}:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"


#################################################################################
# NOTE: The ifelse program
# ifelse [ -X ] [ -n ] { prog1... } { prog2... } prog3...
# ifelse performs conditional execution, with two branches.
# ifelse reads prog1... in a block. It forks and executes it, then waits for it to complete.
#
# If prog1 crashes, ifelse prints an error message and exits 128 plus the number of the signal that killed prog1.
# If prog1 exits with a return code equal to 0, ifelse execs into prog2.
# Else ifelse execs into prog3.
# Options
#
# -n : negate the test.
# -X : do not die if prog1 crashes; treat a crash as a non-zero ("false") exit.
# Notes
#
# ifelse prog1... "" prog2... "" prog3... is roughly equivalent to sh -c 'prog1... && exec prog2... || exec prog3...'.
#################################################################################

# # FIXME: this is what we're going to enable FYI
# ifelse
#   {
#     ##########################[ifelse conditional begins here]#######################

#     #################################################################################
#     # same as [ x$1 = x ] or [ -z "$1" ]
#     # That checks that $1 is empty, though it should be quoted (identical to [ -z "$1" ]).
#     # Some very old shells didn't handle empty strings properly,
#     # so writers of portable scripts adopted this style of checking.
#     # It hasn't been necessary for decades,
#     # but people still do it that way because people still do it that way.
#     #################################################################################
#     test x$LOGNAME = x

#     # ^ re: command, what is it?
#     # source: https://askubuntu.com/questions/512770/what-is-use-of-command-command
#     # Can be used to invoke commands on disk when a function with the same name exists
#     # run: help command
#     #################################################################################
#     # Execute a simple command or display information about commands.
#     # Runs COMMAND with ARGS suppressing  shell function lookup, or display
#     # information about the specified COMMANDs.  Can be used to invoke commands
#     # on disk when a function with the same name exists.
#     #################################################################################
#     # And yes, command -v will give the same kind of result as type.
#     #################################################################################
#     }
#     {
#         ##########################[ifelse TRUE begins here]##############################

#         #################################################################################
#         # NOTE:  pipeline program
#         # pipeline runs two commands with a pipe between them.
#         # pipeline [ -d ] [ -r | -w ] { prog1... } prog2...
#         # It runs prog1... as a child process and execs into prog2..., with a pipe between prog1's stdout and prog2's stdin.
#         # prog1's pid is available in prog2 as the ! environment variable.
#         #################################################################################
#         pipeline
#         {
#             #################################################################################
#             # NOTE: echo program
#             # -n     do not output the trailing newline
#             #################################################################################
#             echo -n
#             $PATH.rest
#         }
#         #################################################################################
#         # NOTE: tr program
#         # tr - translate or delete characters
#         # tr [OPTION]... SET1 [SET2]
#         #################################################################################
#         tr " " :
#     }
#     ##########################[ifelse ELSE begins here]#######################
#     pipeline
#     {
#         echo -n
#         $PATH.first
#         $PATH.rest
#     }
#   }
# tr " " :


# note: LOGNAME not defined currently
export USER $LOGNAME
# export SHELL /etc/execline-shell
export SHELL /bin/bash
